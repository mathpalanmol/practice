
package com.adamsresearch.ws.async.generated;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "ExchangeRateService", targetNamespace = "http://async.ws.adamsresearch.com/", wsdlLocation = "file:/home/anmol/workspace/practice/AsyncService/src/main/java/exchange-rate.wsdl")
public class ExchangeRateService
    extends Service
{

    private final static URL EXCHANGERATESERVICE_WSDL_LOCATION;
    private final static WebServiceException EXCHANGERATESERVICE_EXCEPTION;
    private final static QName EXCHANGERATESERVICE_QNAME = new QName("http://async.ws.adamsresearch.com/", "ExchangeRateService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/home/anmol/workspace/practice/AsyncService/src/main/java/exchange-rate.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        EXCHANGERATESERVICE_WSDL_LOCATION = url;
        EXCHANGERATESERVICE_EXCEPTION = e;
    }

    public ExchangeRateService() {
        super(__getWsdlLocation(), EXCHANGERATESERVICE_QNAME);
    }

    public ExchangeRateService(WebServiceFeature... features) {
        super(__getWsdlLocation(), EXCHANGERATESERVICE_QNAME, features);
    }

    public ExchangeRateService(URL wsdlLocation) {
        super(wsdlLocation, EXCHANGERATESERVICE_QNAME);
    }

    public ExchangeRateService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, EXCHANGERATESERVICE_QNAME, features);
    }

    public ExchangeRateService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ExchangeRateService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ExchangeRate
     */
    @WebEndpoint(name = "ExchangeRatePort")
    public ExchangeRate getExchangeRatePort() {
        return super.getPort(new QName("http://async.ws.adamsresearch.com/", "ExchangeRatePort"), ExchangeRate.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ExchangeRate
     */
    @WebEndpoint(name = "ExchangeRatePort")
    public ExchangeRate getExchangeRatePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://async.ws.adamsresearch.com/", "ExchangeRatePort"), ExchangeRate.class, features);
    }

    private static URL __getWsdlLocation() {
        if (EXCHANGERATESERVICE_EXCEPTION!= null) {
            throw EXCHANGERATESERVICE_EXCEPTION;
        }
        return EXCHANGERATESERVICE_WSDL_LOCATION;
    }

}
